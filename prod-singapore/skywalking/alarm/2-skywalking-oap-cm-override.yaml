apiVersion: v1
data:
  alarm-settings.yml: |
    rules:
      # Rule unique name, must be ended with `_rule`.
      service_resp_time_rule:
        metrics-name: service_resp_time
        op: ">"
        threshold: 1000
        period: 10
        count: 3
        silence-period: 5
        message: "服务: {name}  \n指标: 响应时间  \n详情: 至少3次超过1000毫秒(最近10分钟内)"

      service_sla_rule:
        # Metrics value need to be long, double or int
        metrics-name: service_sla
        op: "<"
        threshold: 8000
        # The length of time to evaluate the metrics
        period: 10
        # How many times after the metrics match the condition, will trigger alarm
        count: 2
        # How many times of checks, the alarm keeps silence after alarm triggered, default as same as period.
        silence-period: 3
        message: "服务: {name}  \n指标: 成功率  \n详情: 至少2次低于80%(最近10分钟内)"

      service_resp_time_percentile_rule:
        # Metrics value need to be long, double or int
        metrics-name: service_percentile
        op: ">"
        threshold: 2500,2500,2500,2500,2500
        period: 10
        count: 3
        silence-period: 5
        # 至少有一个条件达到: p50>1000、p75>1000、p90>1000、p95>1000、p99>1000
        message: "服务: {name}  \n指标: 响应时间  \n详情: 至少3次百分位超过2500ms(最近10分钟内)"

      service_instance_resp_time_rule:
        metrics-name: service_instance_resp_time
        op: ">"
        threshold: 1000
        period: 10
        count: 2
        silence-period: 5
        message: "实例: {name}  \n指标: 响应时间  \n详情: 至少2次超过1000毫秒(最近10分钟内)"

      database_access_resp_time_rule:
        metrics-name: database_access_resp_time
        threshold: 1000
        op: ">"
        period: 10
        count: 2
        message: "数据库访问: {name}  \n指标: 响应时间  \n详情: 至少2次超过1000毫秒(最近10分钟内)"

      endpoint_relation_resp_time_rule:
        metrics-name: endpoint_relation_resp_time
        threshold: 3000
        op: ">"
        period: 10
        count: 2
        message: "端点关系: {name}  \n指标: 响应时间  \n详情: 至少2次超过3000毫秒(最近10分钟内)"

      instance_jvm_old_gc_count_rule:
        metrics-name: instance_jvm_old_gc_count
        threshold: 1
        op: ">"
        period: 1440
        count: 1
        message: "实例: {name}  \n指标: OldGC次数  \n详情: 最近1天内大于1次"

      instance_jvm_young_gc_count_rule:
        metrics-name: instance_jvm_young_gc_count
        threshold: 1
        op: ">"
        period: 5
        count: 100
        message: "实例: {name}  \n指标: YoungGC次数  \n详情: 最近5分钟内大于100次"
      # 需要在config/oal/core.oal添加一行: endpoint_abnormal = from(Endpoint.*).filter(responseCode in [404, 500, 503]).count();
      endpoint_abnormal_rule:
        metrics-name: endpoint_abnormal
        threshold: 1
        op: ">="
        period: 2
        count: 1
        message: "接口: {name}  \n指标: 接口异常  \n详情: 最近2分钟内至少1次"

    filter-expression: '!message.matches(".*\\/synchrony-proxy\\/v1.*") && !message.matches(".*\\/download\\/attachments.*")' 
     
    feishuHooks:
      textTemplate: |-
        {
          "msg_type": "post",
          "content": {
            "post": {
              "zh_cn": {
                "title": "DKS-UAT SkyWalking Alarm",
                "content": [
                  [
                    {
                      "tag": "text",
                      "un_escape": true,
                      "text": "%s"
                    }
                  ]
                ]
              }
            }
          }
        }
      webhooks:
      - url: https://open.feishu.cn/open-apis/bot/v2/hook/3e0d9bc0-4a60-4f63-9128-082e7514d3a8
        # secret: dummysecret


  core.default.log4j-xml: |
    <Configuration status="WARN">
       <Appenders>
         <Console name="Console"target="SYSTEM_OUT">
           <PatternLayout charset="UTF-8"pattern="%d - %c - %L [%t] %-5p %x - %m%n"/>
         </Console>
       </Appenders>
       <Loggers>
         <logger name="io.grpc.netty"level="INFO"/>
         <logger name="org.apache.skywalking.oap.server.configuration.api"level="TRACE"/>
         <logger name="org.apache.skywalking.oap.server.configuration.configmap"level="DEBUG"/>
         <Root level="INFO">
           <AppenderRef ref="Console"/>
         </Root>
        </Loggers>
    </Configuration>
  metadata-service-mapping.yaml: |
    serviceName: mesh-svr::${LABELS."service.istio.io/canonical-name",LABELS."app.kubernetes.io/name",LABELS.app}
    serviceInstanceName: ${NAME}
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: skywalking
    meta.helm.sh/release-namespace: ns-skywalking
  labels:
    app: skywalking
    app.kubernetes.io/managed-by: Helm
    component: oap
    release: skywalking
  name: skywalking-oap-cm-override
  namespace: ns-skywalking

